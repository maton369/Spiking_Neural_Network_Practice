# -*- coding: utf-8 -*-
# ==============================================================
# Izhikevichニューロンモデルのシミュレーション
# --------------------------------------------------------------
# このコードは、Izhikevichモデルを用いて単一ニューロンの発火ダイナミクスをシミュレートする。
# Izhikevichモデルは、Hodgkin-Huxleyモデルの複雑な生理学的挙動を
# わずか2つの変数（膜電位vと回復変数u）で再現する計算的に効率の良いモデルである。
# ==============================================================

import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

# ==============================================================
# シミュレーション設定
# --------------------------------------------------------------
# dt: 時間刻み幅 [ms]
# T : シミュレーション全体の長さ [ms]
# nt: ステップ数（T/dtで計算）
# ==============================================================
dt = 0.5
T = 400  # ms
nt = round(T / dt)  # シミュレーションのステップ数

# ==============================================================
# Regular spiking (RS) ニューロンのパラメータ設定
# --------------------------------------------------------------
# 以下は大脳皮質に一般的な「定常発火（RS）」ニューロンを表す。
# a: 回復速度を決める係数（大きいほど早く回復）
# b: 膜電位vに対する回復変数uの感受性
# k: 膜電位の非線形性を調整する係数
# d: 発火後に回復変数uをどれだけ増加させるか（順応効果）
# ==============================================================
C = 100  # 膜容量(pF)
a = 0.03  # 回復時定数の逆数 (1/ms)
b = -2  # uのvに対する共鳴度合い(pA/mV)
k = 0.7  # ゲイン (pA/mV)
d = 100  # 発火で活性化される正味の外向き電流(pA)
vrest = -60  # 静止膜電位 (mV)
vreset = -50  # リセット電位 (mV)
vthr = -40  # 閾値電位 (mV)
vpeak = 35  # ピーク電位 (mV)

# ==============================================================
# 入力電流の設定
# --------------------------------------------------------------
# 50msから350msの間、定常的に100pAの電流を与え、
# その間の発火挙動を観察する。
# ==============================================================
t = np.arange(nt) * dt
I = 100 * (t > 50) - 100 * (t > 350)  # 入力電流(pA)

"""
# 以下は他のニューロンタイプの例：
# Intrinsically Bursting (IB) neurons
C = 150; a = 0.01; b = 5; k =1.2; d = 130
vrest = -75; vreset = -56; vthr = -45; vpeak = 50;
I = 600*(t>50) - 600*(t>350) 

# Chattering (CH) neurons
C = 50; a = 0.03; b = 1; k =1.5; d = 150
vrest = -60; vreset = -40; vthr = -40; vpeak = 35;
I = 600*(t>50) - 600*(t>350) 
"""

# ==============================================================
# 初期化
# --------------------------------------------------------------
# v : 膜電位
# v_: 前ステップの膜電位（v(t-1))
# u : 回復電流
# v_arr, u_arr: 各時刻の値を保存する配列
# ==============================================================
v = vrest
v_ = v
u = 0
v_arr = np.zeros(nt)  # 膜電位を記録する配列
u_arr = np.zeros(nt)  # 回復変数を記録する配列

# ==============================================================
# シミュレーションループ
# --------------------------------------------------------------
# オイラー法によって、微分方程式を逐次的に積分する。
# dv/dt = [k*(v-vrest)*(v-vthr) - u + I] / C
# du/dt = a*(b*(v_-vrest) - u)
# ==============================================================
for i in tqdm(range(nt)):
    # 膜電位の変化率（dv/dt）の計算
    dv = (k * (v - vrest) * (v - vthr) - u + I[i]) / C
    v = v + dt * dv  # 膜電位をオイラー法で更新

    # 回復変数の変化率（du/dt）の計算
    u = u + dt * (a * (b * (v_ - vrest) - u))

    # 発火の検出（閾値を超えたらスパイク）
    s = 1 * (v >= vpeak)

    # 発火時の状態更新
    # uをdだけ上昇させ（順応的効果）、vをリセット電位に戻す
    u = u + d * s
    v = v * (1 - s) + vreset * s

    # 前時刻の膜電位を記録
    v_ = v
    v_arr[i] = v  # 膜電位を保存
    u_arr[i] = u  # 回復変数を保存

# ==============================================================
# 可視化
# --------------------------------------------------------------
# 上段：膜電位の時間変化（スパイク列）
# 下段：回復変数の変化（発火後の順応過程）
# ==============================================================
plt.figure(figsize=(5, 5))

# --- 膜電位のプロット ---
plt.subplot(2, 1, 1)
plt.plot(t, v_arr, color="k")
# plt.title("Regular spiking (RS) neurons")
plt.ylabel("Membrane potential (mV)")
plt.xlim(0, T)
plt.tight_layout()

# --- 回復電流のプロット ---
plt.subplot(2, 1, 2)
plt.plot(t, u_arr, color="k")
plt.xlabel("Time (ms)")
plt.ylabel("Recovery current (pA)")
plt.xlim(0, T)
plt.tight_layout()

# --- 結果の保存 ---
plt.savefig("Izhikevich_regular.pdf")
plt.show()
