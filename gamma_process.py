# -*- coding: utf-8 -*-
# ==============================================================
# ガンマ過程 (Gamma Process) に基づくスパイク列の生成
# --------------------------------------------------------------
# このスクリプトは、生物学的ニューロンのスパイク間隔（ISI）が
# ポアソン分布からずれる「規則的な発火」を再現するために、
# ガンマ分布に従うインタースパイク間隔（ISI）を用いてスパイク列を生成する。
# k=1 のときにポアソン過程に一致し、k>1 のときに発火がより周期的になる。
# ==============================================================
import numpy as np
import matplotlib.pyplot as plt
import scipy.special as sps

# ==============================================================
# 乱数シード固定（再現性確保）
# ==============================================================
np.random.seed(seed=0)

# ==============================================================
# シミュレーション設定
# --------------------------------------------------------------
# dt: 時間刻み幅 [s]
# T : シミュレーション時間 [s]
# nt: 総ステップ数
# n_neurons: ニューロン数
# ==============================================================
dt = 1e-3
T = 1
nt = round(T / dt)
n_neurons = 10

# ==============================================================
# ガンマスパイクモデルの設定
# --------------------------------------------------------------
# fr   : 平均発火率 [Hz]
# k    : 形状パラメータ（k=1でポアソン過程）
# theta: スケールパラメータ（fr = 1 / (k * theta)）
# --------------------------------------------------------------
# k が大きいほど発火が周期的（規則的）になり、
# k=1 のときにポアソン過程と一致する。
# ==============================================================
fr = 30  # 平均発火率 [Hz]
k = 12  # 形状パラメータ
theta = 1 / (k * (fr * dt))  # fr = 1 / (k * theta)

# ==============================================================
# ISI（スパイク間隔）の生成
# --------------------------------------------------------------
# np.random.gamma() を使用してガンマ分布に従う乱数を生成。
# 各ニューロンに対して独立したISI系列を生成し、累積和を取ることで発火時刻を求める。
# ==============================================================
isi = np.random.gamma(shape=k, scale=theta, size=(int(nt * 1.5 / fr), n_neurons))

# 各ニューロンのスパイク時刻（ISIの累積）
spike_time = np.cumsum(isi, axis=0)

# シミュレーション範囲を超えたスパイクは無効化
spike_time[spike_time > nt - 1] = -1
spike_time = spike_time.astype(np.int32)

# ==============================================================
# スパイク列の生成
# --------------------------------------------------------------
# spikes[t, i] = 1 の場合、時刻tにニューロンiが発火したことを意味する。
# spike_time配列の各インデックスに1を立てる。
# ==============================================================
spikes = np.zeros((nt, n_neurons))
for i in range(n_neurons):
    spikes[spike_time[:, i], i] = 1

# 初期時刻（t=0）のスパイクを削除
spikes[0] = 0

# ==============================================================
# 統計情報の出力
# --------------------------------------------------------------
# Num. of spikes : 全ニューロン・全時間の総スパイク数
# Firing rate    : 平均発火率（総スパイク数 / (ニューロン数 × 時間)）
# ==============================================================
print("Num. of spikes:", np.sum(spikes))
print("Firing rate:", np.sum(spikes) / (n_neurons * T))

# ==============================================================
# 可視化
# --------------------------------------------------------------
# 上段：ガンマ分布に従うISIのヒストグラムと理論分布の重ね描き
# 下段：スパイクラスタープロット（各ニューロンのスパイク時刻）
# ==============================================================
plt.figure(figsize=(5, 5))
t = np.arange(nt) * dt

# --- ISI分布のプロット ---
plt.subplot(2, 1, 1)
count, bins, ignored = plt.hist(
    isi.flatten(), 50, density=True, color="gray", alpha=0.5
)
# 理論的ガンマ分布
y = bins ** (k - 1) * (np.exp(-bins / theta) / (sps.gamma(k) * theta**k))
plt.plot(bins, y, linewidth=2, color="k")
plt.title("$k=$" + str(k))
plt.xlabel("ISI (ms)")
plt.ylabel("Probability density")

# --- スパイクラスタープロット ---
plt.subplot(2, 1, 2)
for i in range(n_neurons):
    plt.plot(t, spikes[:, i] * (i + 1), "ko", markersize=2, rasterized=True)
plt.xlabel("Time (s)")
plt.ylabel("Neuron index")
plt.xlim(0, T)
plt.ylim(0.5, n_neurons + 0.5)
plt.tight_layout()

# ==============================================================
# 結果の保存
# --------------------------------------------------------------
# ガンマ過程によるスパイク列とISI分布を "gamma_process2.pdf" に保存。
# ==============================================================
plt.savefig("gamma_process2.pdf", dpi=300)
plt.show()
