# -*- coding: utf-8 -*-
# ==============================================================
# ポアソン過程に基づく高速スパイク列生成
# --------------------------------------------------------------
# このスクリプトは、ポアソン過程 (Poisson process) を用いて
# ニューロンの確率的なスパイク発火をシミュレーションする。
# 各タイムステップごとに確率 fr*dt でスパイクが発生する。
# ==============================================================
import numpy as np
import matplotlib.pyplot as plt

# ==============================================================
# 乱数シードの固定
# --------------------------------------------------------------
# 同じ結果を再現するために、NumPyの乱数生成を固定。
# ==============================================================
np.random.seed(seed=0)

# ==============================================================
# シミュレーション設定
# --------------------------------------------------------------
# dt: 時間刻み幅 [s]
# T : シミュレーション全体の長さ [s]
# nt: 時間ステップ数 = T / dt
# n_neurons: シミュレーションするニューロンの数
# ==============================================================
dt = 1e-3
T = 1
nt = round(T / dt)  # シミュレーション時間 (1秒, 1ms刻み)
n_neurons = 10  # ニューロン数

# ==============================================================
# 発火率（firing rate）の設定
# --------------------------------------------------------------
# fr: 各ニューロンが単位時間あたりに発火する平均回数 [Hz]
# ポアソン過程のため、各時刻における発火は独立に確率 fr*dt で起こる。
# ==============================================================
fr = 30  # 発火率 [Hz]

# ==============================================================
# スパイク列の生成（ベクトル化された高速実装）
# --------------------------------------------------------------
# np.random.rand(nt, n_neurons):
#   時間×ニューロンのランダム行列を生成。
#   各要素は [0,1) の一様乱数。
#
# np.where( ... < fr*dt, 1, 0 ):
#   各タイムステップごとに確率 fr*dt でスパイク(=1)を発生させる。
#   → 確率的に「1」（スパイク）または「0」（無発火）が決定される。
# ==============================================================
spikes = np.where(np.random.rand(nt, n_neurons) < fr * dt, 1, 0)

# ==============================================================
# 統計情報の出力
# --------------------------------------------------------------
# Num. of spikes: 全ニューロン・全時間における総スパイク数
# Firing rate: 平均発火率（スパイク総数 / ニューロン数 / シミュレーション時間）
# ==============================================================
print("Num. of spikes:", np.sum(spikes))
print("Firing rate:", np.sum(spikes) / (n_neurons * T))

# ==============================================================
# 可視化：スパイクラスタープロット
# --------------------------------------------------------------
# 各ニューロンのスパイク時刻を点で描画。
# 横軸：時間 [s]
# 縦軸：ニューロンインデックス（1〜n_neurons）
#
# 各行（ニューロン）に対してスパイクタイミングがランダムに散布され、
# ポアソン過程に特有の「非周期的な」発火パターンを示す。
# ==============================================================
t = np.arange(nt) * dt  # 時間軸 [s]
plt.figure(figsize=(5, 4))
for i in range(n_neurons):
    plt.plot(t, spikes[:, i] * (i + 1), "ko", markersize=2, rasterized=True)

plt.xlabel("Time (s)")
plt.ylabel("Neuron index")
plt.xlim(0, T)
plt.ylim(0.5, n_neurons + 0.5)
plt.tight_layout()

# ==============================================================
# 出力の保存
# --------------------------------------------------------------
# 結果をPDFファイルとして保存する。
# ==============================================================
plt.savefig("poisson_process_fast.pdf", dpi=300)
