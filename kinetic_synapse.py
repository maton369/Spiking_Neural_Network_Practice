# -*- coding: utf-8 -*-
# ==============================================================
# Kineticシナプスモデル（双指数関数型を簡略化した生理学的モデル）
# --------------------------------------------------------------
# このスクリプトは、生理学的にリアルなシナプスダイナミクスを
# 「Kineticシナプスモデル」としてシミュレーションする。
# シナプス伝達における上昇相と減衰相を
# パラメータα（上昇速度）およびβ（減衰速度）で記述する。
# ==============================================================

import numpy as np
import matplotlib.pyplot as plt

# ==============================================================
# シミュレーション設定
# --------------------------------------------------------------
# dt : 時間刻み幅 [s]
# alpha : シナプス立ち上がり速度定数 [1/s]
# beta : シナプス減衰速度定数 [1/s]
# T : シミュレーション全体の長さ [s]
# nt : シミュレーションステップ数
# ==============================================================
dt = 1e-4  # 時間刻み（0.1 ms）
alpha = 1 / 5e-4  # 立ち上がり時定数 = 0.5 ms → 立ち上がりが速い
beta = 1 / 5e-3  # 減衰時定数 = 5 ms → 減衰が遅い
T = 0.05  # シミュレーション時間（50 ms）
nt = round(T / dt)  # ステップ数

# ==============================================================
# 状態変数の初期化
# --------------------------------------------------------------
# r : シナプス開口率（シナプス受容体が開いている割合）
# single_r : 記録用リスト
# spike : t=0 のときのみスパイク入力 (=1)、それ以外は0
# ==============================================================
r = 0
single_r = []

# ==============================================================
# メインシミュレーションループ
# --------------------------------------------------------------
# 微分方程式：
#     dr/dt = α * spike * (1 - r) - β * r
#
# ここで、
#   α : シナプスチャネルの開口速度（スパイク時に開く速度）
#   β : シナプスチャネルの閉鎖速度（電流の減衰速度）
#
# スパイクが到達した瞬間にチャネルが開き（α項）、
# その後、指数関数的に閉じていく（β項）。
# ==============================================================
for t in range(nt):
    spike = 1 if t == 0 else 0  # t=0 でスパイク入力
    single_r.append(r)
    # オイラー法による更新
    r += (alpha * spike * (1 - r) - beta * r) * dt

# ==============================================================
# 可視化
# --------------------------------------------------------------
# 出力：シナプス電流 r(t) の時間変化
# 「急上昇→緩やか減衰」という典型的なポストシナプス電流が再現される。
# ==============================================================
time = np.arange(nt) * dt
plt.figure(figsize=(4, 3))
plt.plot(time, np.array(single_r), color="k")
plt.xlabel("Time (s)")
plt.ylabel("Post-synaptic current (pA)")
plt.tight_layout()

# 結果の保存
plt.savefig("kinetic_synapse.pdf")
plt.show()
