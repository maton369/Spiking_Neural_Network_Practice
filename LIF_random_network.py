# -*- coding: utf-8 -*-
# ==============================================================
# ランダム結合ネットワークにおけるLIFニューロンの応答シミュレーション
# --------------------------------------------------------------
# このスクリプトでは、ポアソン入力を受けるLIFニューロンに対し、
# Double Exponential Synapse（またはSingle Exponential Synapse）を介して
# シナプス電流が伝達される様子をシミュレーションする。
#
# 入力層：10ニューロン（確率的スパイク）
# 出力層：1ニューロン（LIFモデル）
#
# 結果として、入力スパイク → シナプス電流 → 膜電位応答 の流れを観察できる。
# ==============================================================

import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

# 同一階層のモジュールからクラスをインポート
from Neurons import CurrentBasedLIF
from Synapses import DoubleExponentialSynapse  # , SingleExponentialSynapse

# ==============================================================
# 乱数シードの固定（再現性確保）
# ==============================================================
np.random.seed(seed=0)

# ==============================================================
# シミュレーション設定
# --------------------------------------------------------------
# dt : 時間刻み幅 [s]
# T  : シミュレーション時間 [s]
# nt : 時間ステップ数
# num_in  : 入力ニューロン数
# num_out : 出力ニューロン数
# ==============================================================
dt = 1e-4
T = 1
nt = round(T / dt)
num_in = 10
num_out = 1

# ==============================================================
# 入力スパイク列（ポアソン過程）
# --------------------------------------------------------------
# fr_in : 平均発火率 [Hz]
# x     : (nt, num_in) の行列。1ならその時刻にスパイク発火。
# ==============================================================
fr_in = 30  # 入力スパイク発火率（30Hz）
x = np.where(np.random.rand(nt, num_in) < fr_in * dt, 1, 0)

# ==============================================================
# シナプス重み行列の初期化
# --------------------------------------------------------------
# ランダムな重み（正規分布）で結合を定義。
# 各入力の寄与をランダム化して多様性を確保。
# ==============================================================
W = 0.2 * np.random.randn(num_out, num_in)

# ==============================================================
# モデル定義
# --------------------------------------------------------------
# LIFニューロン（電流ベース）：
#   - 入力電流 I に対して膜電位を更新。
# Double Exponential Synapse：
#   - スパイクに対して上昇と減衰の2つの時定数で電流を生成。
# ==============================================================
neurons = CurrentBasedLIF(
    N=num_out, dt=dt, tref=5e-3, tc_m=1e-2, vrest=-65, vreset=-60, vthr=-40, vpeak=30
)
synapses = DoubleExponentialSynapse(N=num_out, dt=dt, td=1e-2, tr=1e-2)
# synapses = SingleExponentialSynapse(N=num_out, dt=dt, td=1e-2)

# ==============================================================
# 記録用配列の初期化
# --------------------------------------------------------------
# current : 各時刻のシナプス電流 [pA]
# voltage : 各時刻の膜電位 [mV]
# ==============================================================
current = np.zeros((num_out, nt))
voltage = np.zeros((num_out, nt))

# ==============================================================
# シミュレーションループ
# --------------------------------------------------------------
# 各タイムステップで次の処理を行う：
#   1. 入力スパイクをシナプス重み行列Wで合成
#   2. シナプスモデルで電流波形を生成
#   3. LIFモデルで膜電位を更新
#   4. 結果を記録
# ==============================================================
neurons.initialize_states()  # ニューロン状態を初期化
for t in tqdm(range(nt)):
    I = synapses(np.dot(W, x[t]))  # 入力電流（シナプス応答込み）
    s = neurons(I)  # LIFニューロンの更新
    current[:, t] = I  # シナプス電流を記録
    voltage[:, t] = neurons.v_  # 膜電位を記録

# ==============================================================
# 結果の可視化
# --------------------------------------------------------------
# 各段階（膜電位・シナプス電流・入力スパイク）を順に表示。
# ==============================================================
t = np.arange(nt) * dt
plt.figure(figsize=(7, 6))

# --- (1) 膜電位の時間変化 ---
plt.subplot(3, 1, 1)
plt.plot(t, voltage[0], color="k")
plt.xlim(0, T)
plt.ylabel("Membrane potential (mV)")
plt.tight_layout()

# --- (2) シナプス電流の時間変化 ---
plt.subplot(3, 1, 2)
plt.plot(t, current[0], color="k")
plt.xlim(0, T)
plt.ylabel("Synaptic current (pA)")
plt.tight_layout()

# --- (3) 入力スパイク列（ラスタープロット） ---
plt.subplot(3, 1, 3)
for i in range(num_in):
    plt.plot(t, x[:, i] * (i + 1), "ko", markersize=2, rasterized=True)
plt.xlabel("Time (s)")
plt.ylabel("Input neuron index")
plt.xlim(0, T)
plt.ylim(0.5, num_in + 0.5)
plt.tight_layout()

# --- 結果の保存 ---
plt.savefig("LIF_random_network.pdf")
plt.show()

# ==============================================================
# 💬 コメント：
# --------------------------------------------------------------
# - 入力スパイクがDouble Exponential Synapseを通ることで、
#   電流波形に滑らかな上昇・減衰が生じる。
# - LIFニューロンはシナプス電流に応じて膜電位を変化させ、
#   閾値に達すると発火（vpeak=30mV）後にリセット。
# - この構成により、確率的入力からの膜電位変動が可視化できる。
# ==============================================================
