# -*- coding: utf-8 -*-
# ==============================================================
# 遅延結合を介した2ニューロン系のシミュレーション
# --------------------------------------------------------------
# このスクリプトでは、2つのLIF（Leaky Integrate-and-Fire）ニューロン間に
# シナプス伝達遅延（DelayConnection）を導入したネットワークをシミュレーションする。
#
# Neuron1 →（遅延接続）→ Neuron2
#
# Neuron1は速い時定数（反応が早い）、
# Neuron2は遅い時定数（反応が鈍い）を持ち、
# シナプス遅延による電位伝播の時間差を可視化できる。
# ==============================================================

import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

# 同一階層のファイルからモデルをインポート
from Neurons import CurrentBasedLIF
from Connections import DelayConnection

# ==============================================================
# シミュレーション設定
# --------------------------------------------------------------
# dt : 時間刻み幅 [s]
# T  : シミュレーション時間 [s]
# nt : ステップ数
# ==============================================================
dt = 1e-4
T = 5e-2
nt = round(T / dt)

# ==============================================================
# ニューロンおよび遅延接続の定義
# --------------------------------------------------------------
# neuron1 : 入力電流Iを直接受ける速いニューロン
# neuron2 : 遅延を介してNeuron1の出力を受ける遅いニューロン
# delay_connect : シナプス遅延モデル（2ms）
# ==============================================================
neuron1 = CurrentBasedLIF(
    N=1, dt=dt, tc_m=1e-2, tref=0, vrest=0, vreset=0, vthr=1, vpeak=1
)
neuron2 = CurrentBasedLIF(
    N=1, dt=dt, tc_m=1e-1, tref=0, vrest=0, vreset=0, vthr=1, vpeak=1
)
delay_connect = DelayConnection(N=1, delay=2e-3, dt=dt)  # 2ms遅延

# ==============================================================
# 入力電流と記録用変数の初期化
# --------------------------------------------------------------
# I : Neuron1への定常入力 [pA]
# v_arr1, v_arr2 : 各ニューロンの膜電位を記録する配列
# ==============================================================
I = 2  # 入力電流
v_arr1 = np.zeros(nt)
v_arr2 = np.zeros(nt)

# ==============================================================
# シミュレーションループ
# --------------------------------------------------------------
# 各タイムステップごとに以下を実行：
#   1. Neuron1に電流Iを入力 → 発火信号s1を取得
#   2. s1を遅延接続DelayConnectionに通してd1を生成
#   3. d1をNeuron2にスケーリングして入力し、膜電位を更新
# ==============================================================
for t in tqdm(range(nt)):
    s1 = neuron1(I)  # Neuron1 の発火出力
    d1 = delay_connect(s1)  # 発火信号に遅延を適用
    s2 = neuron2(0.02 / dt * d1)  # Neuron2 に遅延後の信号を入力

    # 各ニューロンの膜電位を保存
    v_arr1[t] = neuron1.v_
    v_arr2[t] = neuron2.v_

# ==============================================================
# 可視化
# --------------------------------------------------------------
# Neuron1とNeuron2の膜電位を時間軸上で比較。
# 遅延結合による反応の時間差を確認できる。
# ==============================================================
time = np.arange(nt) * dt * 1e3  # [ms] 単位に変換
plt.figure(figsize=(5, 4))
plt.plot(time, v_arr1, label="Neuron1", color="k", linestyle="dashed")
plt.plot(time, v_arr2, color="k", label="Neuron2")
plt.xlabel("Time (ms)")
plt.ylabel("Membrane potential (v)")
plt.legend(loc="upper left")
plt.tight_layout()
plt.savefig("delay.pdf")
plt.show()

# ==============================================================
# 🔍 コメント：
# --------------------------------------------------------------
# - Neuron1 は速い膜時定数（10 ms）を持ち、即座に反応。
# - Neuron2 は膜時定数が長く（100 ms）、反応が遅い。
# - 2 ms の遅延を持つ DelayConnection により、
#   Neuron2 の電位上昇が Neuron1 より遅れて出現。
# - この結果、シナプス遅延の影響が時間波形として可視化できる。
# ==============================================================
